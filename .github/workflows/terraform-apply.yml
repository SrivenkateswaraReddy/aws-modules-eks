name: Terraform

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
    paths:
      - "**/*"
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform (Apply, Destory or plan)"
        required: true
        default: "plan"
        type: choice
        options:
          - apply
          - destroy
          - plan
      environment:
        description: "Environment (dev, staging, prod)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      module:
        description: "Terraform Module to Deploy (vpc, s3, sns, eks)"
        required: true
        type: choice
        default: "vpc"
        options:
          - vpc

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TF_VERSION: 1.8.3 # specify the Terraform version you want to use
      TF_WORKING_DIR: ./${{github.event.inputs.module}} # specify your Terraform
      TF_VAR_FILE: variables/${{ github.event.inputs.environment }}.tfvars
      #configuration directory
      S3_KEY: "modules/${{ github.event.inputs.module }}/terraform.tfstate"

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # specify the AWS region

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.S3_BACKEND }}"  -backend-config="key=${{ env.S3_KEY }}"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=variables/dev.tfvars
        working-directory: ${{ env.TF_WORKING_DIR }}

      # - name: Terraform Plan JSON
      #   if: always()
      #   run: terraform show -json plan.tfplan | tee plan.json
      #   working-directory: ${{ env.TF_WORKING_DIR }}

      # - name: Upload Plan to GitHub Artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: terraform-plan
      #     path: ${{ env.TF_WORKING_DIR }}/plan.json
      - name: Terraform plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -var-file=${{ env.TF_VAR_FILE }}
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -var-file=${{ env.TF_VAR_FILE }} --auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -var-file=${{ env.TF_VAR_FILE }} --auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Output
        if: success() && github.event.inputs.action == 'apply'
        run: terraform output -json
        working-directory: ${{ env.TF_WORKING_DIR }}
